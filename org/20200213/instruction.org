#+TITLE: Token과 Instruction의 수명
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup

* Token과 Instruction이 같은 수명을 가지는것의 단점

현재 Parser는 &'c Bump를 받아서 Vec<'c, Instruction<'c>>를 돌려준다

하지만 그냥 &'s str에서 잘라다가 Vec<Instruction<'s>>를 만들면 안되는가?

이런 경우를 생각해보자

#+INCLUDE: "./instruction-no-bump.rs" src rust

Parse가 &'s str의 수명을 갖는다면 이런식의 코드는 짜기가 힘들게된다 스코프 밖에서 's가 계속 빌려진 상태로 존재해야하기 때문이다

만약 클로저안에서 String을 만들고 그 레퍼런스를 넘겨준다고 생각해보자 그러면 로컬 변수의 레퍼런스를 리턴하는 셈이므로 컴파일 에러가 뜬다

#+INCLUDE: "./instruction-no-bump-err.rs" src rust

단순히 로컬에서 String을 만드는 경우뿐만 아니라 같은 String 버퍼를 공유해서 여러 파일을 읽는등 String을 빌려진 상태로 두기 어려운 경우가 있다

또한 식별자와 문자열 리터럴만 저장할수없고 무조건 *전체* 문자열을 들고 있어야 하는것은 메모리를 더 먹게된다

* Token과 Instruction 다른 수명을 가지는것의 단점
  
반대로 지금처럼 Bump를 이용해서 수명을 다르게 만든것의 단점은 뭐가 있을까?

일단 Token에 있는 &'s str을 그대로 사용하지 못하고 Bump::alloc_str을 통해서 새로 할당 + 복사를 해줘야한다

물론 그걸 위한 bumpalo인만큼 그 속도는 아주 빠르긴 하지만 분명 느려지긴한다

그리고 include_str!를 이용한다던가 해서 문자열의 수명에 크게 구애받지 않는다면 쓸데없이 Bump를 사용하지 않아도 될것이다

또한 위에서 String이 's만큼 빌려진 상태로 있어야 하는것과 마찬가지로 Bump또한 'c만큼 빌려진 상태로 있어야한다

Bump는 모든 Parser와 Context가 &로 공유할수 있기에 스크립트마다 새로 만들어야하는 String보단 사정이 낫긴하지만 역시 불편한 상황이 종종 발생할수 있다


* 그렇다면 어떻게?
  
결국 둘다 어느정도 트레이드 오프가 있고 그건 사용자의 요구사항에 달렸기 때문에

사용자가 두가지 경우를 모두 사용할수 있도록 trait를 이용해서 추상화 해두는것이 최선이라 할 수 있겠다

대충 이런 코드를 예상해본다

#+INCLUDE: "./instruction-future.rs" src rust

